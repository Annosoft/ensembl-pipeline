# You may distribute this module under the same terms as perl itself

# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Pipeline::Config::GeneBuild::UTR_Builder - imports global variables used by EnsEMBL gene building

=head1 SYNOPSIS
    use Bio::EnsEMBL::Pipeline::Config::GeneBuild::UTR_Builder;
    use Bio::EnsEMBL::Pipeline::Config::GeneBuild::UTR_Builder qw(  );

=head1 DESCRIPTION

UTR_Builder is a pure ripoff of humConf written by James Gilbert.
humConf is based upon ideas from the standard perl Env environment
module.

It imports and sets a number of standard global variables into the
calling package, which are used in many scripts in the human sequence
analysis system.  The variables are first decalared using "use vars",
so that it can be used when "use strict" is in use in the calling
script.  Without arguments all the standard variables are set, and
with a list, only those variables whose names are provided are set.
The module will die if a variable which doesn\'t appear in its
C<%UTR_Builder> hash is asked to be set.

The variables can also be references to arrays or hashes.

Edit C<%UTR_Builder> to add or alter variables.

All the variables are in capitals, so that they resemble environment
variables.

=head1 CONTACT

=cut

package Bio::EnsEMBL::Pipeline::Config::GeneBuild::UTR_Builder;

use strict;
use vars qw( %UTR_Builder );

# Hash containing config info
%UTR_Builder = (

	     # biotype for UTR_Builder output genes
	     UTR_GENETYPE         => 'UTR_Genes',

	     # biotype for blessed UTR_Builder output genes
	     BLESSED_UTR_GENETYPE => 'Blessed_UTR_Genes',

	     # biotype for UTR_Builder output genes using "known cdnas"
	     KNOW_UTR_GENETYPE    => 'known_UTR',

	     # input genes that need to go through without change of CDS (like CCDS genes)
	     BLESSED_GENETYPES    => ['ccds_gene'],

	     # input gene type for cDNAs aligned with exonerate & est2genome
	     cDNA_GENETYPE        => 'cDNA_update',

	     # input gene type for ESTs aligned with exonerate & est2genome
	     EST_GENETYPE         => 'est_exonerate',

	     # don't allow introns longer than this - transcripts are split
	     MAX_INTRON           => 10000,

	     #prune genes during filtering if desired (not recommended)
	     PRUNE_GENES          => 0,

	     #filtering the ESTs like the cDNA removes most, but is cleaner
	     FILTER_ESTS      => 0,

	     #try to find predefined pairing (between protein & cDNA) as the first step
	     LOOK_FOR_KNOWN       => 1,

	     # other non-generic input gene-types
             # (also looking in 
             # Bio::EnsEMBL::Pipeline::Config::GeneBuild::Targetted and
             # Bio::EnsEMBL::Pipeline::Config::GeneBuild::Similarity)
	     # format: ['exonerate_genes', 'other_great_genes']
	     OTHER_GENETYPES      => [],

	     # Ditags can be use ditags to filter ESTs / cDNAs
	     # format: ['SHC012', 'SHC013'],
	     DITAG_TYPE_NAMES     => [],

             # do you want to apply filtering to the est genes?
	     FILTER_ESTS          => 0,

             #output verbosity
	     VERBOSE              => 0,
	   );


sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else
  # all of UTR_Builder:
  my @vars = @_ ? @_ : keys( %UTR_Builder );
  return unless @vars;

  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;

    foreach (@vars) {
	if ( defined $UTR_Builder{ $_ } ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$UTR_Builder{ $_ };
	} else {
	    die "Error: UTR_Builder: $_ not known\n";
	}
    }
}

1;
