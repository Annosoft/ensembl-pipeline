# You may distribute this module under the same terms as perl itself

# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Pipeline::Config::GeneBuild::Scripts - imports global variables used by EnsEMBL gene building

=head1 SYNOPSIS
    use Bio::EnsEMBL::Pipeline::Config::GeneBuild::Scripts;
    use Bio::EnsEMBL::Pipeline::Config::GeneBuild::Scripts qw(  );

=head1 DESCRIPTION

Scripts is a pure ripoff of humConf written by James Gilbert.

humConf is based upon ideas from the standard perl Env environment
module.

It imports and sets a number of standard global variables into the
calling package, which are used in many scripts in the human sequence
analysis system.  The variables are first decalared using "use vars",
so that it can be used when "use strict" is in use in the calling
script.  Without arguments all the standard variables are set, and
with a list, only those variables whose names are provided are set.
The module will die if a variable which doesn\'t appear in its
C<%Scripts> hash is asked to be set.

The variables can also be references to arrays or hashes.

Edit C<%Scripts> to add or alter variables.

All the variables are in capitals, so that they resemble environment
variables.

=head1 CONTACT

=cut


package Bio::EnsEMBL::Pipeline::Config::GeneBuild::Scripts;

use strict;
use vars qw( %Scripts );
use Bio::EnsEMBL::Pipeline::Config::GeneBuild::Targetted qw (
							     GB_TARGETTED_GW_GENETYPE
							    );

use Bio::EnsEMBL::Pipeline::Config::GeneBuild::Similarity qw (
							     GB_SIMILARITY_GENETYPE
							    );

use Bio::EnsEMBL::Pipeline::Config::GeneBuild::Combined qw (
							     GB_COMBINED_GENETYPE
							    );

use Bio::EnsEMBL::Pipeline::Config::GeneBuild::GeneBuilder qw (
							     GB_FINAL_GENETYPE
							    );

# Hash containing config info
%Scripts = (
	    # path to run_GeneBuild_RunnableDB ie /path/to/ensembl-pipeline/scripts/run_GeneBuild_RunnableDB
	    GB_RUNNER      => '',
	    
	    # path to scratch area for output files
	    GB_OUTPUT_DIR      => '',
	    
	    # LSF queue plus any options you want to use
	    GB_QUEUE       => 'acari',

	    # path to swissprot "evidence kill list" file - file of
	    # protein IDs that should not be used for building genes
	    # but have made it into the protein databases eg
	    # transposable elements 
	    # ie /path/to/ensembl-pipeline/scripts/GeneBuild/kill_list.txt
	    GB_KILL_LIST   => '',
	    
	    # array of hashes, each hash contains the runnable class name and the analysis logic name
	    GB_LENGTH_RUNNABLES      => [
					 {
					  runnable => 'FPC_TargettedGeneWise',
					  analysis => $GB_TARGETTED_GW_GENETYPE,
					 },
					 {
					  runnable => 'FPC_BlastMiniGenewise',
					  analysis => $GB_SIMILARITY_GENETYPE,
					 },
					 {
					  runnable => 'Combine_Genewises_and_E2Gs',
					  analysis => $GB_COMBINED_GENETYPE,
					 },
					 {
					  runnable => 'Gene_Builder',
					  analysis => $GB_FINAL_GENETYPE,
					 }
					],
	    
	    
	    # size of chunk to use in length based build
	    GB_SIZE                  => '1000000',

	    ############################################################
	    # pmatch related variables - for Targetted build
	    ############################################################
	    
	    # path to refseq fasta file 
	    GB_REFSEQ      => '',
	    
	    # path to swissprot fasta file
	    GB_SPTR        => '',

	    # information about the different protein sources used by new_prepare_proteome.pm
	    GB_PROTEOME_FILES => [
				  #{
				  # file_path => '/data/blastdb/Worms/wormpep97.pep',
				  # header_regex => '\w+\s+(\w+)',
				  #>AC3.2 CE05132   UDP-glucuronosyltransferase status:Partially_confirmed
				  #},
				  #{
				  # file_path => 'swall',
				  # header_regex => '^>\S+\s+\((\S+)\)',
				  #},
				  #{
				  # file_path => 'refseq',
				  # header_regex => '^>\w+\|\w+\|\w+\|(\S+)\|',
				  #},
				 ],
	    
	    # path to directory where fpc/chromosomal sequences are 
	    GB_FPCDIR      => '',
	    
	    # directory to write pmatch results
	    GB_PM_OUTPUT   => '',	

	    
	    GB_SUBMIT_GENEBUILD_LOGICNAME => 'SubmitGeneBuild', #logic_name of dummy analysis for input_id_analysis table

	    GB_RULEMANAGER_SLEEP => 15,	#how long rulemamnger sleeps for before checking next analysis

	    GB_MAX_JOB_TIME => 86400, # the max number of seconds a job should be spending in CPU time in LSF before being killed
	    #86400 is 24 hours
	    GB_KILLED_INPUT_IDS => '', #path to write file for killed input_ids
	    GB_SPLIT_JOB_SIZE => '', #size input_ids should be split to generally half GB_SIZE
	    GB_KILLED_OUTPUT_DIR => '', #directory output of killed jobs will be written to
	    GB_KILLED_RUNNER => 'ensembl-pipeline/scripts/run_split_GeneBuild_jobs.pl', #path to script which will run killed jobs

	    GB_KILLED_BSUB_FILE => '', #file to write the new bsubs lines to
	    GB_PMATCH_PIPELINE => 0, #this should be set to one if you want populate_ipa.pl to put input_ids for pmatchs into the input_id_analysis table 
	    GB_SUBMIT_PMATCH_LOGICNAME => 'SubmitPmatch', #dummy analysis object for the pmatches
	    GB_GENEBUILD_PIPELINE => 0,#this should be set to one if you want populate_ipa.pl to put input_ids for genebuild into the input_id_analysis table 
	    GB_PMATCH_CHUNKS => 0, # this should be set to one if you want the pmatches to run on chunks rather than whole chromosomes
	    GB_PMATCH_SIZE => 20000000, #size of chunk
	   );

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_
  
  # Get list of variables supplied, or else
  # all of Scripts:
  my @vars = @_ ? @_ : keys( %Scripts );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Scripts{ $_ } ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Scripts{ $_ };
	} else {
	    die "Error: Scripts: $_ not known\n";
	}
    }
}

1;
