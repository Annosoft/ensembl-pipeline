# EnsEMBL module for Bio::EnsEMBL::Pipeline::Config::BatchQueue;
#
# You may distribute this module under the same terms as perl itself


=head1 NAME

=head1 CONTACT

B<ensembl-dev@ebi.ac.uk>

=cut


package Bio::EnsEMBL::Pipeline::Config::ECR;

use strict;
use vars qw(%ECR_Config);

%ECR_Config = (

               AXTFILTER_BY_CONFIG => {

                 DEFAULT => {
                   SOURCE        => undef,
                   TARGETNIB     => undef,
                   BEST          => undef,
                   SUBSET        => undef,
                   SUBSET_MATRIX => '/blastz/tight/matrix/for/example.mat',
                   SUBSET_CUTOFF => 3400,
                   CHAIN         => undef,
                   NET           => undef,
                 },


                 MouseBest => {
                   SOURCE    => 'MouseBlastz',
                   TARGETNIB => '/directory/with/mouse/nib/files',
                   BEST      => 1,
                 },
                 
                 MouseTight => {
                   SOURCE    => 'MouseBest',
                   TARGETNIB => '/directory/with/mouse/nib/files',
                   SUBSET    => 1,
                 },

                 MouseNet => {
                   SOURCE    => 'MouseBlastz',
                   TARGETNIB => '/directory/with/mouse/nib/files',
                   NET       => 1,
                 },                                  

               },

               ECR_FILTERS      => {
                 'MouseRatFuguTetZfish' => {
                   sources => ['MouseTight',
                               'RatTight',
                               'FuguEcore',
                               'ZfishEcore',
                               'TetEcore'],
                   union => 0,
                   merge => 0, 
                 },
                 
                 'Mouse_Rat_Fugu_Tet_Zfish' => {
                   sources => ['MouseTight',
                               'RatTight',
                               'FuguEcore',
                               'ZfishEcore',
                               'TetEcore'],
                   union => 1,
                   merge => 0,
                 },
                 'MouseRat' => {
                   sources => ['MouseTight',
                               'RatTight'],
                   union => 0,
                   merge => 0,
                 },
                 'Mouse_Rat' => {
                   sources => ['MouseTight',
                               'RatTight'],
                   union => 1,
                   merge => 0,
                 },
                 'FuguTetZfish' =>  {
                   sources => ['FuguEcore',
                               'ZfishEcore',
                               'TetEcore'],
                   union => 0,
                   merge => 0,
                 },
                 'Fugu_Tet_Zfish' => {
                   sources => ['FuguEcore',
                               'ZfishEcore',
                               'TetEcore'],
                   union => 1,
                   merge => 0,
                 },
               },
               );
               
sub import {
    my ($callpack) = caller(0); # Name of the calling package
    my $pack = shift; # Need to move package off @_

    # Get list of variables supplied, or else all
    my @vars = @_ ? @_ : keys(%ECR_Config);
    return unless @vars;

    # Predeclare global variables in calling package
    eval "package $callpack; use vars qw("
         . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if (defined $ECR_Config{ $_ }) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$ECR_Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
