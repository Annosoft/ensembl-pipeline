#
# Object for storing details of an analysis job
#
# Cared for by Michele Clamp  <michele@sanger.ac.uk>
#
# Copyright Michele Clamp
#
# You may distribute this module under the same terms as perl itself
#
# POD documentation - main docs before the code

=pod 

=head1 NAME

Bio::EnsEMBL::Pipeline::DBSQL::Job

=head1 SYNOPSIS

=head1 DESCRIPTION

Stores run and status details of an analysis job

=head1 CONTACT

Describe contact details here

=head1 APPENDIX

The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _

=cut

# Let the code begin...

package Bio::EnsEMBL::Pipeline::DBSQL::Job;

use vars qw(@ISA);
use strict;

# Object preamble - inherits from Bio::Root::Object;

use Bio::EnsEMBL::Pipeline::DB::JobI;
use Bio::EnsEMBL::Pipeline::Analysis;
use Bio::EnsEMBL::Pipeline::Status;

@ISA = qw(Bio::EnsEMBL::Pipeline::DB::JobI Bio::Root::Object);



sub _initialize {
    my ($self,@args) = @_;

    my $make = $self->SUPER::_initialize;
    my ($dbobj,$input_id,$analysis,$queue,$create) = $self->_rearrange([qw(DBOBJ
									   INPUT_ID
									   ANALYSIS
									   QUEUE
									   CREATE
									   )],@args);

    $input_id   || $self->throw("Can't create a job object without an input_id");
    $dbobj      || $self->throw("Can't create a job object without a database handle");
    $queue      || $self->throw("Can't create a job object without a queue");
    $analysis   || $self->throw("Can't create a job object without an analysis object");

    $dbobj->isa("Bio::EnsEMBL::Pipeline::DBSQL::Obj") || 
	$self->throw("Database object [$dbobj] is not a Bio::EnsEMBL::Pipeline::DBSQL::Obj");
    $analysis->isa("Bio::EnsEMBL::Pipeline::Analysis") ||
	$self->throw("Analysis object [$analysis] is not a Bio::EnsEMBL::Pipeline::Analysis");

    $self->_dbobj  ($dbobj);
    $self->input_id($input_id);
    $self->queue   ($queue);
    $self->analysis($analysis);

    if ($create == 1) {
	$self->get_id;
    }
    return $make; # success - we hope!
}

=head2 id

  Title   : id
  Usage   : $self->id($id)
  Function: Get/set method for the id of the job itself
            This will usually be generated by the
            back end database the jobs are stored in
  Returns : int
  Args    : int

=cut


sub id {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->{_id} = $arg;
    }
    return $self->{_id};

}


=head2 get_id

  Title   : get_id
  Usage   : my $newid = $self->get_id
  Function: Creates a new job entry in the database
            and returns the new id.
  Returns : int
  Args    : 

=cut


sub get_id {
    my ($self) = @_;

    my $analysis = $self->_dbobj->write_Analysis($self->analysis);

    $self->analysis($analysis);

    $self->throw("No analysis object defined") unless $self->analysis;
    $self->throw("No analysis id input")       unless defined($self->analysis->id);

    my $query =   "insert into job (id,input_id,analysis,queue) values (NULL," .
				     $self->input_id     . ",".
				     $self->analysis->id . ",\"" .
				     $self->queue        ."\")";

    print("query is $query\n");
    my $sth = $self->_dbobj->prepare($query);
    my $res = $sth->execute();

       $sth = $self->_dbobj->prepare("select last_insert_id()");
       $sth->execute;

    my $rowhash = $sth->fetchrow_hashref;
    my $id      = $rowhash->{'last_insert_id()'};

    $self->id($id);

    my $status  = $self->set_status('CREATED');

    return $id;
}

=head2 input_id

  Title   : input_id
  Usage   : $self->input_id($id)
  Function: Get/set method for the id of the input to the job
  Returns : int
  Args    : int

=cut


sub input_id {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->{_input_id} = $arg;
    }
    return $self->{_input_id};
}

=head2 analysis

  Title   : analysis
  Usage   : $self->analysis($anal);
  Function: Get/set method for the analysis object of the job
  Returns : Bio::EnsEMBL::Pipeline::Analysis
  Args    : bio::EnsEMBL::Pipeline::Analysis

=cut


sub analysis {
    my ($self,$arg) = @_;
    if (defined($arg)) {
	$self->throw("[$arg] is not a Bio::EnsEMBL::Pipeline::Analysis object" ) unless
	    $arg->isa("Bio::EnsEMBL::Pipeline::Analysis");

	$self->{_analysis} = $arg;
    }
    return $self->{_analysis};

}


=head2 LSF_id

  Title   : LSF_id
  Usage   : $self->LSF_id($id)
  Function: Get/set method for the LSF id of the job
  Returns : int
  Args    : int

=cut


sub LSF_id {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->{_LSF_id} = $arg;
    }
    return $self->{_LSF_id};

}

=head2 queue

  Title   : queue
  Usage   : $self->queue
  Function: Get/set method for the LSF queue name
  Returns : String
  Args    : String

=cut

sub queue {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->{_queue} = $arg;
    }
    return $self->{_queue};

}


=head2 machine

  Title   : machine
  Usage   : $self->machine($machine)
  Function: Get/set method for the machine the job is running on
  Returns : string
  Args    : string

=cut

sub machine {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->{_machine} = $arg;
    }
    return $self->{_machine};
}



=head2 submit

  Title   : submit
  Usage   : $self->submit
  Function: Submits the job to the specified LSF queue
  Returns : 
  Args    : 

=cut

sub submit {
    my ($self) = @_;

    $self->throw("Method submit not implemented");
}


=head2 freeze

  Title   : freeze
  Usage   : $self->freeze
  Function: Freezes the object into a string
  Returns : String
  Args    : None

=cut

sub freeze {
    my ($self) = @_;

    $self->throw("Method freeze not implemented");
}


=head2 submission_checks

  Title   : submission_checks
  Usage   : $self->submission_checks
  Function: After submission to the LSF queue when 
            the wrapper script is run - these are
            the checks to run (on binaries,databases etc)
            before the job is run.
  Returns : String
  Args    : None

=cut

sub submission_checks {
    my ($self) = @_;

    $self->throw("Method submission_checks not implemented");
}

=head2 set_status

  Title   : set_status
  Usage   : my $status = $job->set_status
  Function: Sets the job status
  Returns : nothing
  Args    : Bio::EnsEMBL::Pipeline::Status

=cut

sub set_status {
    my ($self,$arg) = @_;

    $self->throw("No status input" ) unless defined($arg);


    my $sth = $self->_dbobj->prepare("insert into jobstatus(id,status,time) values (" .
				     $self->id . ",\"" .
				     $arg      . "\"," .
				     "now())");
    my $res = $sth->execute();



    $sth = $self->_dbobj->prepare("select time from jobstatus where id = " . $self->id . 
				  " and status = \""                       . $arg      . "\"");
    $res = $sth->execute();
    
    my $rowhash = $sth->fetchrow_hashref();
    my $time    = $rowhash->{'time'};


    my $status = new Bio::EnsEMBL::Pipeline::Status(-jobid   => $self->id,
						    -status  => $arg,
						    -created => $time,
						    );

    $self->current_status($status);
}


=head2 current_status

  Title   : current_status
  Usage   : my $status = $job->current_status
  Function: Get/set method for the current status
  Returns : Bio::EnsEMBL::Pipeline::Status
  Args    : Bio::EnsEMBL::Pipeline::Status

=cut

sub current_status {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->throw("[$arg] is not a Bio::EnsEMBL::Pipeline::Status object") unless
	    $arg->isa("Bio::EnsEMBL::Pipeline::Status");

	$self->{_status} = $arg;
    } 

    ## Should go to the database here if we don't have a status object
    return $self->{_status};
}

=head2 get_all_status

  Title   : get_all_status
  Usage   : my @status = $job->get_all_status
  Function: Get all status objects associated with this job
  Returns : @Bio::EnsEMBL::Pipeline::Status
  Args    : @Bio::EnsEMBL::Pipeline::Status

=cut

sub get_all_status {
    my ($self) = @_;

    $self->throw("Method get_all_status not implemented");
}


=head2 _dbobj

  Title   : _dbobj
  Usage   : my $db = $self->_dbobj
  Function: Get/set method for the database handle
  Returns : @Bio::EnsEMBL::Pipeline::DBSQL::Obj
  Args    : @Bio::EnsEMBL::Pipeline::DBSQL::Obj,none

=cut

sub _dbobj {
    my ($self,$arg) = @_;

    if (defined($arg)) {
	$self->throw("[$arg] is not a Bio::EnsEMBL::Pipeline::DBSQL::Obj") unless 
	    $arg->isa("Bio::EnsEMBL::Pipeline::DBSQL::Obj");

	$self->{_dbobj} = $arg;
    }
    return $self->{_dbobj};
}


1;






