#!/usr/local/bin/perl


=head1 NAME

retransfer_Features  - transfers features for a list of input clones
=head1 SYNOPSIS
 
  update.pl

=head1 DESCRIPTION

This script transfers all the features attached to a clone to a new
database and deletes any existing features

=head1 OPTIONS

    -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -help      Displays script documentation with PERLDOC
    
    -nowrite   Runs entire script without writing in recipient

    -verbose   Gets all the print STDERR for testing purposes

=cut


use strict;
use Getopt::Long;

use Bio::EnsEMBL::Pipeline::DBSQL::Obj;
use Bio::EnsEMBL::DBLoader;

use vars qw(@ISA);

@ISA = qw(Bio::Root::Object);

my $host   = 'localhost';
my $port   = '410000';
my $dbname = 'pipeline';
my $dbuser = 'root';
my $pass   = undef;
my $db;
my $db_version;
my $db_file;
my $program;
my $program_version;
my $program_file;
my $module;
my $module_version;
my $gff_source;
my $gff_feature;
my $parameters;

my $dbmodule  = "Bio::EnsEMBL::Pipeline::DBSQL::Obj";

my $help;

&GetOptions( 
	     'host:s'            => \$host,
	     'port:n'            => \$port,
	     'dbname:s'          => \$dbname,
	     'dbuser:s'          => \$dbuser,
	     'pass:s'            => \$pass,
	     'db:s'              => \$db,
	     'db_version:s'      => \$db_version,
	     'db_file:s'         => \$db_file,
	     'program:s'         => \$program,
	     'program_version:s' => \$program_version,
	     'program_file:s'    => \$program_file,
	     'gff_source:s'      => \$gff_source,
	     'gff_feature:s'     => \$gff_feature,
	     'parameters:s'      => \$parameters,
	     'module:s'          => \$module,
	     'module_version:s'  => \$module_version,
	     'h|help'            => \$help,
	     );


$db              = '__NONE__' unless $db;
$db_version      = '__NONE__' unless $db_version;
$db_file         = '__NONE__' unless $db_file;
$program_file         = '__NONE__' unless $program_file;

$module          || die "No module name input";
$module_version  || die "No module version input";
$program         || die "No program name input";
$program_version || die "No program version input";
$gff_source      || die "No gff source tag input";
$gff_feature     || die "No gff feature tag input";

if ($help) {
    exec('perldoc', $0);
}


$| = 1;

my $locator  = make_locator_string($dbmodule,$host,$port,$dbname,$dbuser,$pass);
my $anadb    = new Bio::EnsEMBL::DBLoader($locator);

my $analysis = new Bio::EnsEMBL::Pipeline::Analysis  (-db              => $db,
						      -db_version      => $db_version,
						      -db_file         => $db_file,
						      -program         => $program,
						      -program_version => $program_version,
						      -program_file    => $program_file,
						      -module          => $module,
						      -module_version  => $module_version,
						      -gff_source      => $gff_source,
						      -gff_feature     => $gff_feature,
						      -parameters      => $parameters);

eval {
$anadb->write_Analysis($analysis);

print(STDERR "Analysis written to database\n");
};

print($@);

sub make_locator_string {
    my ($module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    return 	"$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass";
    
}






