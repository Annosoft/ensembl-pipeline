#!/usr/local/bin/perl


=head1 NAME

test_RunnableDB

=head1 SYNOPSIS

test_RunnableDB

=head1 DESCRIPTION

Runs a RunnableDB on an input seq (extracted from a database) and
optionally writes features or whatever back into the database.

Requires a DB connexion, input ID, name of runnable and analysis ID.

=head1 OPTIONS

    -host      host name for database (gets put as host= in DBAdaptor)

    -port      For RDBs, what port to connect to (port= in DBAdaptor)

    -dbname    For RDBs, what name to connect to (dbname= in DBAdaptor)

    -user    For RDBs, what username to connect as (dbuser= in DBAdaptor)

    -pass    For RDBs, what password to use (pass= in DBAdaptor)

    -input_id  The input id for the RunnableDB

    -analysis  The logic name of the analysis we want to run

=cut

use strict;
use Getopt::Long;

use Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Pipeline::SeqFetcher::Pfetch;
use Bio::EnsEMBL::Pipeline::SeqFetcher::Getz;
use Bio::EnsEMBL::DBLoader;

my $host   = '';
my $port   = undef;
my $dbname = '';
my $user = 'ensro';
my $pass = undef;
my $input_id;
my $analysisid;
my $write  = 0;
my $check  = 0;
my $params;
my $pepfile;
my $input_type;
my $logic_name;
my $module;

&GetOptions( 
	     'host:s'      => \$host,
	     'port:n'      => \$port,
	     'dbname:s'    => \$dbname,
	     'user:s'      => \$user,
	     'pass:s'      => \$pass,
	     'input_id:s'  => \$input_id,
	     'logic_name:s'=> \$logic_name,
             'input_type:s'=> \$input_type,
	     'write'       => \$write,
             'check'       => \$check,
             'parameters:s'=> \$params,
	     'pepfile:s'   => \$pepfile,
             'module:s'    => \$module,
	     );

$| = 1;

my $runnable = $module;

$runnable = "Bio::EnsEMBL::Pipeline::RunnableDB::$runnable"
 unless $runnable =~ /Bio::EnsEMBL::Pipeline::RunnableDB/;

(my $file = $runnable) =~ s/::/\//g;
require "$file.pm";

if ($check) {
   exit(0);
}
my $db = new Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor(
    -host             => $host,
    -user             => $user,
    -port             => $port,
    -dbname           => $dbname,
    -pass             => $pass,
    -perlonlyfeatures => 0
);

my     $sf = new Bio::EnsEMBL::Pipeline::SeqFetcher::Pfetch;

die "No input id entered" unless defined ($input_id);

my $analysis = $db->get_AnalysisAdaptor->fetch_by_logic_name($logic_name);

if (!defined($analysis)) {
  if (!defined($module)) {
     die "Must supply a module name if creating a new analysis";
  }
  if (!defined($input_type)) {
     die "Must supply an input type if creating a new analysis";
  }
  $analysis = new Bio::EnsEMBL::Pipeline::Analysis(-logic_name => $logic_name,
                                                   -module     => $module,
                                                   -input_type => $input_type);
}

my %hparams;
# eg -parameters param1=value1,param2=value2
foreach my $p(split /,/, $params){
  my @sp = split /=/, $p;
  $sp[0] = '-' . $sp[0];
  $hparams{$sp[0]} =  $sp[1];
}

print "DB " . $db->host . "\n";
my $runobj = "$runnable"->new(-db        => $db,
			      -input_id  => $input_id,
			      -analysis  => $analysis,
			      -seqfetcher => $sf,
			      %hparams,
			     );

if ($pepfile) {
    $runobj->pep_file($pepfile);
}

$runobj->fetch_input;
$runobj->run;

 
my @out = $runobj->output;

if ($write) {
  $runobj->write_output;
}
foreach my $out (@out) {
    if ($out->isa ("Bio::EnsEMBL::FeaturePair")) {
      print ($out->gffstring . "\n");
    } elsif ($out->isa("Bio::EnsEMBL::Gene")) {
      print "\n";
      foreach my $tran (@{$out->get_all_Transcripts}) {
         foreach my $exon (@{$tran->get_all_Exons}) {
            print "Exon " . $exon->start . "\t" . $exon->end . "\t" . $exon->strand . "\t" . $exon->phase . "\n";
            foreach my $ev (@{$exon->get_all_supporting_features}) {
               print "  - " . $ev->gffstring . "\n";
            }
         }
      }
    } else {
      print $out->gffstring . "\n";
    }
}

