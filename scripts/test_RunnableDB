#!/usr/local/bin/perl


# Guys - could we not unshift @INC in a script - it makes developing elsewhere
# painful. PERL5LIB and/or perl -I is your friend EB

#BEGIN {
#  unshift (@INC,"/nfs/acari/enspipe/src_mouse/EnsEMBL/ensembl-pipeline/modules");
#  unshift (@INC,"/nfs/acari/enspipe/src_mouse/EnsEMBL/ensembl/modules");
#}


=head1 NAME

test_RunnableDB

=head1 SYNOPSIS
 
  test_RunnableDB

=head1 DESCRIPTION


=head1 OPTIONS

    -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -input_id  The input id for the RunnableDB

    -runnable  The name of the runnable module we want to run

=cut

use strict;
use Getopt::Long;


use Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor;
use Bio::EnsEMBL::DBLoader;
my $dbtype = 'rdb';
my $host   = 'ecs1c';
my $port   = undef;
my $dbname = 'ensembl080';
my $dbuser = 'ensro';
my $pass   = undef;
my $runnable;
my $input_id;
my $analysisid;
my $write  = 0;
my $check  = 0;
my $params;

&GetOptions( 
	     'host:s'      => \$host,
	     'port:n'      => \$port,
	     'dbname:s'    => \$dbname,
	     'dbuser:s'    => \$dbuser,
	     'pass:s'      => \$pass,
	     'input_id:s'  => \$input_id,
	     'runnable:s'  => \$runnable,
	     'analysis:n'  => \$analysisid,
	     'write'       => \$write,
             'check'       => \$check,
             'parameters:s'=> \$params,
	     );

$| = 1;

die "No runnable entered" unless defined ($runnable);
(my $file = $runnable) =~ s/::/\//g;
require "$file.pm";

if ($check) {
   exit(0);
}
my $db = new Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor(
    -host             => $host,
    -user             => $dbuser,
    -dbname           => $dbname,
    -perlonlyfeatures => 0
);


die "No input id entered" unless defined ($input_id);

(my $file = $runnable) =~ s/::/\//g;
require "$file.pm";


my $analysis = $db->get_AnalysisAdaptor->fetch_by_dbID($analysisid);

my %hparams;
# eg -parameters param1=value1,param2=value2
foreach my $p(split /,/, $params){
  my @sp = split /=/, $p;
  $sp[0] = '-' . $sp[0];
  $hparams{$sp[0]} =  $sp[1];
}

my $runobj = "$runnable"->new(-dbobj    => $db,
			      -input_id => $input_id,
			      -analysis => $analysis,
			      %hparams,
			     );

$runobj->fetch_input;
$runobj->run;

 
my @out = $runobj->output;

if ($write) {
  $runobj->write_output;
}
foreach my $out (@out) {
    if ($out->isa ("Bio::EnsEMBL::FeaturePair")) {
      print ($out->gffstring . "\n");
    } else {
      print $out->gffstring . "\n";
    }
}

sub make_locator_string {
    my ($type,$module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    return "$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass;perlonlyfeatures=1";

}

