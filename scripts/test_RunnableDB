#!/usr/local/bin/perl


# Guys - could we not unshift @INC in a script - it makes developing elsewhere
# painful. PERL5LIB and/or perl -I is your friend EB

#BEGIN {
#  unshift (@INC,"/nfs/acari/enspipe/src_mouse/EnsEMBL/ensembl-pipeline/modules");
#  unshift (@INC,"/nfs/acari/enspipe/src_mouse/EnsEMBL/ensembl/modules");
#}


=head1 NAME

test_RunnableDB

=head1 SYNOPSIS
 
  test_RunnableDB

=head1 DESCRIPTION


=head1 OPTIONS

    -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -input_id  The input id for the RunnableDB

    -runnable  The name of the runnable module we want to run

=cut

use strict;
use Getopt::Long;

use Bio::EnsEMBL::Pipeline::DBSQL::Obj;
use Bio::EnsEMBL::DBLoader;
use Bio::EnsEMBL::Pipeline::RunnableDB::Gene_Builder;
use Bio::EnsEMBL::Pipeline::RunnableDB::BlastGenscanPep;
use Bio::EnsEMBL::Pipeline::RunnableDB::FPC_BlastMiniGenewise;
use Bio::EnsEMBL::Pipeline::RunnableDB::BlastGenscanDNA;
use Bio::EnsEMBL::Pipeline::RunnableDB::Est2Genome;
use Bio::EnsEMBL::Pipeline::RunnableDB::RepeatMasker;
use Bio::EnsEMBL::Pipeline::RunnableDB::TargettedGeneDNA;
use Bio::EnsEMBL::Pipeline::RunnableDB::TargettedGeneWise;

my $dbtype = 'rdb';
my $host   = 'ecs1c';
my $port   = undef;
my $dbname = 'ensembl080';
my $dbuser = 'ensro';
my $pass   = undef;
my $runnable;
my $input_id;
my $analysisid;
my $write  = 0;
my $check  = 0;

&GetOptions( 
	     'host:s'      => \$host,
	     'port:n'      => \$port,
	     'dbname:s'    => \$dbname,
	     'dbuser:s'    => \$dbuser,
	     'pass:s'      => \$pass,
	     'input_id:s'  => \$input_id,
	     'runnable:s'  => \$runnable,
	     'analysis:n'  => \$analysisid,
	     'write'     => \$write,
             'check'       => \$check,
	     );

$| = 1;
if ($check) {
   exit(0);
}
my $db = new Bio::EnsEMBL::Pipeline::DBSQL::Obj(-host => $host,
						-user => $dbuser,
						-dbname => $dbname,
#                                                -perlonlyfeatures => 0,
					       );



die "No runnable entered" unless defined ($runnable);
die "No input id entered" unless defined ($input_id);

my $analysis = $db->get_AnalysisAdaptor->fetch_by_dbID($analysisid);

my $runobj = "$runnable"->new(-dbobj    => $db,
			      -input_id => $input_id,
			      -analysis => $analysis,
			     );

$runobj->fetch_input;
$runobj->run;

 
my @out = $runobj->output;

if ($write) {
  $runobj->write_output;
}
foreach my $out (@out) {
    if ($out->isa ("Bio::EnsEMBL::FeaturePair")) {
      print ($out->gffstring . "\n");
    } else {
      print $out . "\n";
    }
}

sub make_locator_string {
    my ($type,$module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    return "$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass;perlonlyfeatures=1";

}

