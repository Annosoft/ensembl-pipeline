#!/usr/local/bin/perl


=head1 NAME

Job_Tracker: Displays jobs by status, analysis id, input id or age.


=head1 SYNOPSIS

    Job_Tracker

=head1 DESCRIPTION



=head1 OPTIONS

    -anahost      host name for database (gets put as host= in locator)

    -anaport      For RDBs, what port to connect to (port= in locator)

    -anadbname    For RDBs, what name to connect to (dbname= in locator)

    -anadbuser    For RDBs, what username to connect as (dbuser= in locator)

    -anapass      For RDBs, what password to use (dbpass= in locator)
    
    -status       CREATED, SUBMITTED FAILED or SUCCESSFUL
    
    -analysis     analysis id
    
    -age          age since job status recorded in minutes

    -input        input id
    
    -$dir         a directory to store Job_Tracker output (gives faster loading)

=cut


use strict;

use Getopt::Long;

use Bio::EnsEMBL::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Job;
use Bio::EnsEMBL::Pipeline::SimpleJob;
use Bio::EnsEMBL::Pipeline::RunnableDBI;
use FreezeThaw;

my $anahost     = 'localhost';
my $anaport     = '410000';
my $anadbname   = 'ensembl_freeze24';
my $anadbuser   = 'root';
my $anapass     =  undef;
my $status      = 'FAILED';
my $analysis    = undef;
my $age         = undef;
my $input_id    = undef;
my $dir         = undef;

&GetOptions(
	    'anahost:s'     => \$anahost,
	    'anaport:n'     => \$anaport,
	    'anadbname:s'   => \$anadbname,
	    'anadbuser:s'   => \$anadbuser,
	    'anapass:s'     => \$anapass,
        'status:s'      => \$status,
	    'analysis:s'    => \$analysis,
	    'age:s'         => \$age,
        'input:s'       => \$input_id,
        'dir:s'         => \$dir,
        );



my $anadb  = new Bio::EnsEMBL::Pipeline::DBSQL::Obj(-host   => $anahost,
						    -port   => $anaport,
						    -dbname => $anadbname,
						    -user   => $anadbuser,
						    -pass   => $anapass);
my @jobs;
my $title;

if ($analysis)
{
    @jobs = $anadb->get_JobsByAnalysis($analysis);
    $title = "Jobs by Analysis ID ($analysis)";
}
elsif ($age) 
{
    @jobs = $anadb->get_JobsByAge($age);
    $title = "Jobs by Age ($age min)"; 
}
elsif ($input_id)
{
    @jobs = $anadb->get_JobsByInputId($input_id);
    $title = "Jobs by Input ID ($input_id)";
}
else
{
    @jobs = $anadb->get_JobsByCurrentStatus($status);
    $title = "Jobs by Current Status ($status)";
}

my (@created, @successful, @submitted, @failed);

#sort by status
foreach my $job (@jobs)
{
    if ($job->current_status->status eq 'CREATED')
    {
        push (@created, $job); 
    }
    elsif ($job->current_status->status eq 'SUBMITTED')
    { 
        push (@submitted, $job); 
    }
    elsif ($job->current_status->status eq 'SUCCESSFUL')
    { 
        push (@successful, $job); 
    }
    elsif ($job->current_status->status eq 'FAILED')
    { 
        push (@failed, $job); 
    }
}

if ($dir)
{
    die ("Directory $dir doesn't exist") unless (-e $dir);
    my $filename = $dir.'jobtracker'
}

print STDERR "Sorted by status: JOBS: ".@jobs." CREATED ".@created." SUBMITTED ".@submitted
      ." SUCCESSFUL ".@successful." FAILED ".@failed."\n";

print "<BODY TEXT=\"#000000\" BGCOLOR=\"#FFFFFF\">";
    print("<TABLE>\n");
    
    
if ($dir)
{
    die ("Directory $dir doesn't exist") unless (-e $dir);
    my $filename = $dir.'jobtracker.output'; #need to add machine info   
    
    print(  "<TR>$title</TR>"
            ."<TR BGCOLOR=\"00FF55\">"
            ."<TD><a href=\"$filename.created.html\"> CREATED  (".@created.")</a></TD>"
            ."<TD><a href=\"$filename.submitted.html\"> SUBMITTED (".@submitted.")</a></TD>"
            ."<TD><a href=\"$filename.successful.html\"> SUCCESSFUL (".@successful.")</a></TD>"
            ."<TD><a href=\"$filename.failed.html\"> FAILED (".@failed.")</a></TD>"
            ."</TR>"
            );
    print("</TABLE>\n");    
    printlist($filename.'.created.html', @created);
    printlist($filename.'.submitted.html', @submitted);
    printlist($filename.'.successful.html', @successful);
    printlist($filename.'.failed.html', @failed);
}
else 
{
    print(  "<TR>$title</TR>"
            ."<TR BGCOLOR=\"00FF55\">"
            ."<TD><a>CREATED (".@created.")</TD>"
            ."<TD>SUBMITTED (".@submitted.")</TD>"
            ."<TD>SUCCESSFUL (".@successful.")</TD>"
            ."<TD>FAILED (".@failed.")</TD>"
            ."</TR>"
            );
    print("</TABLE>\n");
    printlist(undef, @created);
    printlist(undef, @submitted);
    printlist(undef, @successful);
    printlist(undef, @failed);
}    

print STDERR "Sorted by status:\n JOBS: ".@jobs." CREATED ".@created." SUBMITTED ".@submitted
      ." SUCCESSFUL ".@successful." FAILED ".@failed."\n";

sub printlist {
    my ($filename, @list) = @_;
    my $handle;
    
    if ($filename)
    {
        
        open (OUT, ">".$filename) 
            or die ("Couldn't open $filename for writing: $!\n");
        $handle = \*OUT;
    }
    else
    {
        $handle = \*STDOUT;
    }
    
    print $handle "<PRE>\n" 
          ."+------------+--------+-------------+----------------+---------+-------------+---------------+----------+\n"
          ."|   STATUS   | JOB ID |   ANALYSIS  |    INPUT ID    |  LSF ID |STDOUT       | STDERR (bytes)|  STATUS  |\n" 
          ."+------------+--------+-------------+----------------+---------+-------------+---------------+----------+\n"
            if (@list);
   
   #print  "|123456789012|12345678|1234567890123|1234567890123456|1234567890|123456789012|123456789012345|1234567890|\n";
          
    foreach my $job (@list)
    {
        print STDERR "Tracking job ".$job->id."\n";
        $job->_dbobj($anadb);
        $job->get_all_status;
        my $status      = $job->current_status->status;
        my $jobid       = $job->id;
        my $analysis    = $job->analysis->program;
        my $input       = $job->input_id;
        my $outsize     = -s $job->stdout_file;
        my $errsize     = -s $job->stderr_file;
        my $statsize    = -s $job->status_file;
        my $lsf         = $job->LSF_id;
        my $stdout      = "| <a href=\"file:". $job->stdout_file."\">stdout</a>";
        my $stderr      = "| <a href=\"file:". $job->stderr_file."\">stderr</a>";
        my $statfile    = "| <a href=\"file:". $job->status_file."\">status</a>";
        
        $status         = "| ".$status          .(" " x (11 - length ($status))); 
        $jobid          = "| ".$jobid           .(" " x (7  - length ($jobid)));
        $analysis       = "| ".$analysis        .(" " x (12 - length ($analysis)));
        $input          = "| ".$input           .(" " x (15 - length ($input)));     
        $outsize        = " ".$outsize          .(" " x (5  - length ($outsize)));
        $errsize        = " ".$errsize          .(" " x (7  - length ($errsize)));
        $statsize       = " ".$statsize         .(" " x (2  - length ($statsize)));
        $lsf            = "| ".$lsf             .(" " x (8  - length ($lsf)));
        
        print $handle ($status.$jobid.$analysis.$input.$lsf.$stdout.$outsize.$stderr.$errsize.$statfile.$statsize."|\n");
    }
    
    print $handle "+------------+--------+-------------+----------------+---------+-------------+---------------+----------+\n"
          ."</PRE>\n" 
          if (@list);
}



