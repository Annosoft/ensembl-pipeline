#!/usr/local/bin/perl

=head1 NAME

createAnalysis - creates a new analysis object

=head1 SYNOPSIS
 
 createAnalysis

=head1 DESCRIPTION

This script transfers all the features attached to a clone to a new
database and deletes any existing features

=head1 OPTIONS

    -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -help      Displays script documentation with PERLDOC
    
    -nowrite   Runs entire script without writing in recipient

    -verbose   Gets all the print STDERR for testing purposes

=cut


use strict;
use Getopt::Long;

use Bio::EnsEMBL::Pipeline::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Job;
use Bio::EnsEMBL::Pipeline::Analysis;


my $dbhost = 'croc';
my $dbport = 3306;
my $dbname = 'analysis';
my $dbuser = 'root';
my $dbpass = '';
my $help;

&GetOptions( 
	     'dbhost:s'  => \$dbhost,
	     'dbport:n'  => \$dbport,
	     'dbname:s'  => \$dbname,
	     'dbuser:s'  => \$dbuser,
	     'dbpass:s'  => \$dbpass,
	     'h|help'    => \$help,
	     );

if ($help) {
    exec('perldoc', $0);
}

$| = 1;

my $db = new Bio::EnsEMBL::Pipeline::DBSQL::Obj(-host   => $dbhost,
						-port   => $dbport,
						-dbname => $dbname,
						-user   => $dbuser,
						-pass   => $dbpass);

die "Can't connect to database [$dbhost:$dbport:$dbname:$dbuser:$dbpass]" unless $db;

print("Connected to database $dbhost:$dbport:$dbuser:$dbname\n");


my $analysis = new Bio::EnsEMBL::Pipeline::Analysis  (-db              => 'swir',
						      -db_version      => 1,
						      -db_file         => 'somefile',
						      -program         => 'blastx',
						      -program_version => 1,
						      -program_file    => 'blastfile',
						      -module          => '__NONE__',
						      -module_version  => 1,
						      -gff_source      => 'swir',
						      -gff_feature     => 'blastx',
						      -parameters      => "-B 10000000 -V 0");


my $job      = new Bio::EnsEMBL::Pipeline::DBSQL::Job(-dbobj    => $db,
						      -input_id => 1,
						      -analysis => $analysis,
						      -queue    => 'fast_blast_farm',
						      -create   => 1,
						      );

print("New job id is " . $job->id . "\n");

