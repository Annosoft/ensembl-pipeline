#!/usr/local/bin/perl -w
#uses package Bio::EnsEMBL::Pipeline::Runnable::Est2Genome

use strict;

use Bio::EnsEMBL::Pipeline::Runnable::Est2Genome;
use Bio::Seq;

my $genseq= Bio::Seq->new();    
my $estseq= Bio::Seq->new();
my ($genfilename, $estfilename);

unless (@ARGV)
{
     
     print "Enter genomic sequence filename\n";
     $genfilename = <STDIN>;
     print "Enter est sequence filename\n";
     $estfilename = <STDIN>;

} 
else 
{
    ($genfilename, $estfilename) = @ARGV;
}

#create Bio::SeqIO objects to fill Bio::Seq objects
my $genstream = Bio::SeqIO->new(-file => $genfilename, -fmt => 'Fasta');
$genseq = $genstream->next_seq();

my $eststream = Bio::SeqIO->new(-file => $estfilename, -fmt => 'Fasta');
$estseq = $eststream->next_seq();

#create Est2Genome object    
my $e2g = Bio::EnsEMBL::Pipeline::Runnable::Est2Genome->new( -genomic => $genseq,
                                                             -est => $estseq );
#run Est2Genome                                                
$e2g->run();

#get and store the output
my @methods = qw( seqname start end hseqname hstart hend );
my @results = $e2g->output("results.seq");
my $outfile = "results.seq";   
open (OUT, ">$outfile");

foreach my $obj (@results)
{
    print "\n";
    foreach my $method_name (@methods) {
        my $value = $obj->$method_name();
        printf("%10s = $value\n", $method_name);
        print OUT "$method_name: $value\n";
    }
}
close (OUT);

