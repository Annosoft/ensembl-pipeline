#!/usr/local/bin/perl -w
#A script to test Bio::EnsEMBL::Pipeline::Runnable::Genscan
#MAQ

use strict;
use Bio::EnsEMBL::Pipeline::Runnable::Genscan;
use Bio::Seq;
use Bio::SeqIO;

use Data::Dumper;

my ($clonefile, $workdir);

if (!@ARGV)
{
    $clonefile = '/nfs/disk65/mq2/temp/bA151E14.seq'; 
    $workdir = '/nfs/disk65/mq2/temp';
}
else
{
    ($clonefile, $workdir) = @ARGV; 
}

#create and fill Bio::Seq object 
my $seq = Bio::Seq->new();
my $seqstream = Bio::SeqIO->new(-file => $clonefile, -fmt => 'Fasta');
$seq = $seqstream->next_seq();

#create Bio::EnsEMBL::Pipeline::Runnable::Genscan object
my $genscan = Bio::EnsEMBL::Pipeline::Runnable::Genscan->new (-CLONE => $seq);
$genscan->workdir($workdir);
$genscan->run();
#$repmask->output_sf();

#view the output
print "Printing DNA scan\n";
my @methods = qw(seqname start end strand);
my @results = $genscan->output();
foreach my $obj (@results)
{
    print "\n";
    foreach my $method_name (@methods) {
        my $value = $obj->$method_name();
        printf("%10s = $value\n", $method_name);
    }
}


#view the output
print "Printing exons\n";
@results = $genscan->output_exons();
foreach my $obj (@results)
{
    print "\n";
    foreach my $method_name (@methods) {
        my $value = $obj->$method_name();
        printf("%10s = $value\n", $method_name);
    }
}


#view the output
print "Printing genes\n";
@results = $genscan->output_genes();
foreach my $obj (@results)
{
    print "\n";
    foreach my $method_name (@methods) {
        my $value = $obj->$method_name();
        printf("%10s = $value\n", $method_name);
    }
}
