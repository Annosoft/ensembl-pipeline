#!/usr/local/bin/perl

=head1 NAME

test_AlignFeature

=head1 SYNOPSIS
 
  test_AlignFeature

=head1 DESCRIPTION

A contig and its features are retrieved from a database.  Each feature is
then realigned to the genomic using AlignFeature which itself uses
Est2Genome.

=head1 OPTIONS

    -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -help      Displays script documentation with PERLDOC
    
    -nowrite   Runs entire script without writing in recipient

    -verbose   Gets all the print STDERR for testing purposes

    -mini      Use a mini sequence for the est2genome part

=cut

use strict;
use Getopt::Long;

use Bio::EnsEMBL::Pipeline::Runnable::AlignFeature;
use Bio::EnsEMBL::DBSQL::Obj;

use Bio::EnsEMBL::DBLoader;

use vars qw(@ISA);

@ISA = qw(Bio::Root::Object);

my $fdbtype = 'rdb';
my $fhost   = 'obi-wan';
my $fport   = '410000';
my $fdbname = 'pogtest';
my $fdbuser = 'ensro';
my $fpass   = undef;
my $fmodule  = "Bio::EnsEMBL::DBSQL::Obj";
my $cloneid;
my $mini;
my $help;

&GetOptions( 
	     'fdbtype:s'  => \$fdbtype,
	     'fhost:s'    => \$fhost,
	     'fport:n'    => \$fport,
	     'fdbname:s'  => \$fdbname,
	     'fdbuser:s'  => \$fdbuser,
	     'fpass:s'    => \$fpass,
	     'cloneid:s'  => \$cloneid,
	     'mini'       => \$mini,
	     'h|help'     =>  \$help,
	     );


if ($help) {
    exec('perldoc', $0);
}

$| = 1;

# Connect to the rdb
my $locator = make_locator_string($fdbtype,$fmodule,$fhost,$fport,$fdbname,$fdbuser,$fpass);
my $db      = new Bio::EnsEMBL::DBLoader($locator);


my $clone  = $db->get_Clone($cloneid);

foreach my $contig ($clone->get_all_Contigs) {
    my @features = $contig->get_all_SimilarityFeatures;
    
    my $af = new Bio::EnsEMBL::Pipeline::Runnable::AlignFeature(-genomic   => $contig->primary_seq,
								-features  => \@features);

    if ($mini) {
	$af->minirun;
    } else {
	$af->run;
    }

    my @newfeatures = $af->output;

    foreach my $f (@newfeatures) {
	print("Feature is " . $f->id  . "\t" . $f->start . "\t" . $f->end . "\n");
    }
}


sub make_locator_string {
    my ($type,$module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    return "$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass";

}

