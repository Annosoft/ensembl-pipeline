#!/usr/local/bin/perl

use strict;

use Getopt::Long;

use Bio::EnsEMBL::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Job;
use Bio::EnsEMBL::Pipeline::SimpleJob;

my $anahost     = 'ensrv4';
my $anaport     = '410000';
my $anadbname   = 'ensembl_freeze17_michele';
my $anadbuser   = 'ensadmin';
my $anapass     =  undef;
my $infile;     
my $status;


$| = 1;

&GetOptions(
	    'anahost:s'     => \$anahost,
	    'anaport:n'     => \$anaport,
	    'anadbname:s'   => \$anadbname,
	    'anadbuser:s'   => \$anadbuser,
	    'anapass:s'     => \$anapass,
            'infile:s'      => \$infile,
            'status:s'      => \$status,
	    );



my $anadb  = new Bio::EnsEMBL::Pipeline::DBSQL::Obj(-host   => $anahost,
						    -port   => $anaport,
						    -dbname => $anadbname,
						    -user   => $anadbuser,
						    -pass   => $anapass);

my @jobs;

if (defined($status)) {
  @jobs = $anadb->get_JobsByCurrentStatus('FAILED');
} elsif (defined($infile)) {
  @jobs = input_jobs($infile);
} else {
  die "Must input a file of job ids (-infile) or a status name (-status)";
}

JOB:foreach my $job (@jobs) {
    $job->_dbobj($anadb);

    my $module   = $job->analysis->module;

    my $status   = $job->status_file;
    my $stdout   = $job->stdout_file;
    my $error    = $job->stderr_file;
    my $input    = $job->input_object_file;

    print(STDERR "Deleting id  " . $job->id . "\t$module\t" . $job->input_id . "\n");
  
    $anadb->delete_Job($job->id);

    unlink $status;
    unlink $stdout;
    unlink $error;
    unlink $input;

}

sub input_jobs {
  my ($infile) = @_;
  my @jobs;
  open (IN,"<$infile") || die "Couldn't open $infile";

  while (<IN>) {
     chomp;
     if (/^(\d+)/) {
       print "Fetching job $1\n";
       eval {
         my $job = $anadb->get_Job($1);
         push(@jobs,$job);
       };
       if ($@) {
          print STDERR "No job with id $_ [$@]\n";
       }
     }
  }
  close(IN);
  return @jobs;
}
