#!/usr/local/bin/perl


=head1 NAME

Job_submitter - looks at the analysis database and
submits a chunk of jobs.


=head1 SYNOPSIS

    Job_Submitter

=head1 DESCRIPTION



=head1 OPTIONS

    -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -pass      For RDBs, what password to use (dbpass= in locator)

=cut


use strict;

use Getopt::Long;

use Bio::EnsEMBL::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Obj;
use Bio::EnsEMBL::Pipeline::DBSQL::Job;
use Bio::EnsEMBL::Pipeline::SimpleJob;
use Bio::EnsEMBL::Pipeline::RunnableDBI;

use FreezeThaw;

my $anahost     = 'obi-wan';
my $anaport     = '410000';
my $anadbname   = 'pipeline',
my $anadbuser   = 'root';
my $anapass     =  undef;

&GetOptions(
	    'anahost:s'     => \$anahost,
	    'anaport:n'     => \$anaport,
	    'anadbname:s'   => \$anadbname,
	    'anadbuser:s'   => \$anadbuser,
	    'anapass:s'     => \$anapass,
	    );



my $anadb  = new Bio::EnsEMBL::Pipeline::DBSQL::Obj(-host   => $anahost,
						    -port   => $anaport,
						    -dbname => $anadbname,
						    -user   => $anadbuser,
						    -pass   => $anapass);


my @jobs = $anadb->get_JobsByCurrentStatus('CREATED');

foreach my $job (@jobs) {
    
    print(STDERR "Id is " . $job->id . "\t" . $job->analysis->module . "\t" . $job->input_id . "\n");
    my $module   = $job->analysis->module;
    my $runnable = "$module"->new(-input_id => $job->input_id,
				  -dbobj    => $anadb);


    my $simplejob = new Bio::EnsEMBL::Pipeline::SimpleJob(-jobobj   => $job,
							  -runnable => $runnable,
							  );

    $simplejob->submit;
    $simplejob->store;
    
}


sub make_clone  {
    my ($db,$cloneid) = @_;

    my $clone = $db->get_Clone($cloneid);

    foreach my $contig ($clone->get_all_Contigs) {
        my @genes    = $contig->get_all_Genes;
        my @features = $contig->get_all_SimilarityFeatures;

        foreach my $gene (@genes) {

            foreach my $exon ($gene->each_unique_Exon) {
                $exon->find_supporting_evidence(\@features);
            }

        }
    }
   return $clone;
}

