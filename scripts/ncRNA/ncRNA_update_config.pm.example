package ncRNA_update_config;

use strict;
use vars qw(%Config);


%Config = (
	   CONFIG => {
		      CHICKEN => {
				  # source db with dna dont want to write to this one
				  DBNAME     => "gallus_gallus_core_36_1l",
				  DBPORT     => "3365",
				  DBHOST     => "ecs2",
				  # DB to write to (Also the pipeline database)
				  WRITEHOST  => "ia64f",
				  WRITEPORT  => "3306",
				  WRITENAME  => "chicken_ncRNA_update",
				  OUTDIR     => "/path/to/output/directory",
				  # mysql instance source db is on
				  REFINS     => "ecs2my3365",
				  # lsf load for source db
				  REFLOAD    => 400,
				  # mysql instance pipeline/output db is on
			          WRITEINS   => "myia64f",
				  # lsf load for pipeline/output db
				  WRITELOAD  => 800,
				 },
		      HUMAN =>  {
				 # source db with dna dont want to write to this one
				 DBNAME     => "homo_sapiens_core_36_35i",
				 DBPORT     => "3365",
				 DBHOST     => "ecs2",
				 # DB to write to (Also the pipeline database)
				 WRITEHOST  => "ia64f",
				 WRITEPORT  => "3306",
				 WRITENAME  => "human_ncRNA_update",
				 OUTDIR     => "/path/to/output/directory",
				 # mysql instance source db is on
				 REFINS     => "ecs2my3365",
				 # lsf load for source db
				 REFLOAD    => 400,
				 # mysql instance pipeline/output db is on
				 WRITEINS   => "myia64f",
				 # lsf load for pipeline/output db
				 WRITELOAD  => 800,
				}
	             # etc for however many species you want	 				 				 
		     },
	   DATADIR   => "/path/to/work/directory",
	   CVSDIR    => "/path/to/cvs/directory",
	   WRITEUSER => "mysql_admin_user",
	   BIOPERLPATH => "/path/to/bioperl", 
           BIOPERL_LIVE_PATH => "/nfs/acari/jhv//cvs_checkout/bioperl-1.5.1/",
           BIOPERL_RUN_PATH=> "/nfs/acari/jhv//cvs_checkout/bioperl-run-1.5.1/",

	   MIRBASEVERSION => "7.1",
	   RFAMVERSION => "7.0",
	   # directory to make the blast databases in
	   BLASTDIR    => "/path/to/store/blast/databases",
	  );




sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

    # Get list of variables supplied, or else all
  my @vars = @_ ? @_ : keys(%Config);
  return unless @vars;

    # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
       . join(' ', map { '$'.$_ } @vars) . ")";
  die $@ if $@;


    foreach (@vars) {
    if (defined $Config{ $_ }) {
              no strict 'refs';
        # Exporter does a similar job to the following
        # statement, but for function names, not
        # scalar variables:
        *{"${callpack}::$_"} = \$Config{ $_ };
    } else {
        die "Error: Config: $_ not known\n";
    }
  }
}

1;
