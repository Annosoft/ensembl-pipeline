#!/software/bin/perl-5.12.2

=head1 NAME

set_job_status - add a new JOB_STATUS to some jobs

=head1 SYNOPSIS

 set_job_status -dataset <species> -status <statusname> [-requeue] <job_id>+

=head1 DESCRIPTION

This script changes the current status of some jobs, allowing you to
interfere with pipeline progress.  It doesn't respect any locks, you
must know what's going on.

This operation is tricky in plain SQL because you need to add a new
record and then update the old one.  Then you have to re-add to the
pipe_queue, across a database server.

=head1 OPTIONS

    -dataset            the species or dataset to connect to
    -status             new job_status.status value
    -requeue            also add CREATED jobs to pipe_queue

job_id may be space and/or comma separated.

=head1 AUTHOR

Matthew Astley mca@sanger.ac.uk

=cut

use strict;
use warnings;

use Bio::Otter::Lace::Defaults;
use Bio::EnsEMBL::Pipeline::Finished::PipeQueue;

use Bio::EnsEMBL::Utils::Exception qw(throw);


sub main {
    my %opt;
    Bio::Otter::Lace::Defaults::do_getopt
        ('dataset|D=s'   => \$opt{dataset},
         'status|S=s'    => \$opt{status},
         'requeue|Q!'    => \$opt{requeue});
    # help & syntax error are handled

    my @job_id = split /[ ,]/, join ' ', @ARGV;
    if (my @not_id = grep { ! /^\d+$/ } @job_id) {
        die "Bad job_id @not_id";
    }

    die "Syntax: $0 -dataset <dataset> -status <statusname> <job_id>+\n"
      unless $opt{dataset} && $opt{status} && @job_id;

    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($opt{dataset});
    my $pipe_dba = $ds->get_pipeline_DBAdaptor(1);

    my @job_created = set_status($pipe_dba, $opt{status}, @job_id);

    requeue(@job_created) if $opt{requeue};
}


sub set_status {
    my ($pipe_dba, $new_status, @job_id) = @_;

    my $dbh = $pipe_dba->dbc()->db_handle();
    $dbh->begin_work;

    my $ja = $pipe_dba->get_JobAdaptor;
    my $ok = 1;
    my @job_created;
    for my $job_id (@job_id) {
        my $j = $ja->fetch_by_dbID($job_id);
        if ($j) {
            my $old_status = $j->current_status->status;

            # Detect breakage, tested+fixed from Otter v63.01
            die "Wrong class: $j from $ja from $pipe_dba"
              unless $j->isa('Bio::EnsEMBL::Pipeline::Finished::Job');

            if ($old_status eq $new_status) {
                warn "$job_id: status is already $new_status, ignoring this job (and not requeuing)\n";
                # but maybe we want to requeue?
                next;
            }
            $j->set_status($new_status);
            print "$job_id: was $old_status, now $new_status\n";
            push @job_created, $j if $new_status eq 'CREATED';
        } else {
            warn "job_id=$job_id: gone!\n";
            $ok = 0;
        }
    }

    if ($ok) {
        $dbh->commit;
        return @job_created;
    } else {
        $dbh->rollback;
        die "Problems seen - rollback\n";
    }
}


sub requeue {
    my (@job) = @_;
    my $qdb = Bio::EnsEMBL::Pipeline::Finished::PipeQueue->qdbh;
    my $done = 0;
    foreach my $j (@job) {
        my $jid = $j->dbID;
        my $rv = Bio::EnsEMBL::Pipeline::Finished::PipeQueue->push_job($qdb, $j);
        if ($rv) {
            $done++;
        } else {
            warn "insert job_id=$jid into pipe_queue failed";
        }
    }
    print "Inserted $done job(s) into pipe_queue\n";
}


main();
