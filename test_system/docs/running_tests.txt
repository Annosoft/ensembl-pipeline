$Id: running_tests.txt,v 1.5 2012-07-02 16:27:10 ak4 Exp $
========================================================================
RUNNING TESTS
========================================================================

************************************************************************
NOTE:  If no path is specifed, the files mentioned in this document live
in the directory named in the $TESTROOT environment variable, or if this
variable is unset, in the ensembl-pipeline/test_system directory.  It is
assumed that the directory ensembl-pipeline/scripts can be found above
the test_system directory (i.e. as "$TESTROOT/../scripts").  If this is
not the case, the easiest solution is to create a symbolic link to it.
************************************************************************

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
BEFORE RUNNING THE TEST
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Before running the tests, there are a couple of configs files you must
edit:

(1) Database config files
------------------------------------------------------------------------

TestDB.conf (an example is found at TestDB.conf.example) and RefDB.conf
(an example is found at RefDB.conf.example)

Edit the content of the example file, then save a copy of it without the
".example" suffix.

Fill in TestDB.conf if running analysis test without comparison with a
standard set of reference data.  Otherwise, fill in both TestDB.conf and
RefDB.conf.

These files are specific to the pipeline test system, including settings
for where the new database are to be created, what SQL files to use
to load the table structures, and where to find the the compressed
file containing all the dumped out text files of reference data. The
compressed file is named after the species you are running tests
against.

There are also other settings to specify:

  if the database and table schema has already been created previously
  (hence no need to make a new one);

  if the data have been preloaded into the database (hence no need to
  import data from text files to the database);

  if the compressed archive of text files have already been unpacked (so
  "don't_unzip"); and

  how long the RunTest module should sleep for between checking if there
  are jobs running when testing single analyses.


(2) Analysis and Pipeline config files
------------------------------------------------------------------------

These files are similar to those used in a normal GeneBuild process and
are found in ./config, including both

  config/Bio/EnsEMBL/Pipeline/Config   and
  config/Bio/EnsEMBL/Analysis/Config

When running the tests, the PERL5LIB is automatically modified to
point at these prefilled config files.  When the test is finished, the
PERL5LIB is automatically reset to its prior value.

Most of the files do not need much editing if the test is run from
within Ensembl.  However, there are several parameters that you must
check/define before running any tests:

 (i) Fill out the DEFAULT_OUTPUT_DIR in Pipeline/Config/BatchQueue.pm.
     This will be the output_dir used unless another directory
     is explicitly specified on the command line when running
     test_single_analysis.pl or test_whole_pipeline.pl.  See the
     documentation in the test system version of BatchQueue.pm for more
     details on how to control where the output data go.

(ii) Fill in REFERENCE_DB in Analysis/Config/Databases.pm.  This is
     especially important for tests involving Pmatch or BestPmatch
     analyses, either when testing them alone or in the entire pipeline.

Settings specific for Pmatch and BestPmatch:

  You'll need to update the path to the protein seq file in
  Analysis/Config/GeneBuild/Pmatch.pm.  The protein sequence file
  lives in homo_sapiens/data/human_proteins.fa, where the homo_sapiens
  directory is created by unpacking the reference data at the beginning
  of the test.  Note that path provided in Pmatch.pm will have to be
  ABSOLUTE, so the relative path "./homo_sapiens/data/human_proteins.fa"
  will NOT work.

A note about empty directories in ./config/Bio/EnsEMBL/Pipeline/Config:

Directories containing no files are relics from the previous test
system.  They cannot be removed from the CVS but do not affect the
current test system. Below is a list of those empty directories:

  GeneBuild
  Protein_Annotation
  PseudoGenes
  cDNA_ESTs


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
HOW TO RUN THE TEST
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

There are two different types of test:

(1) test_single_analysis.pl

    This takes a species and single logic_name and uses the
    job_submission script to run that analysis.  If no species is
    specified, "homo_sapiens" is used by default.  Then if the correct
    options are specified, the results are compared to the reference set
    of data.  The script reports how many input ids to analyse, how many
    jobs were successful, and how many results were produced.

(2) test_whole_pipeline.pl

    This uses the rule_goal and rule_condition tables defined in the
    dumped out reference data to run the pipeline with RuleManager.
    This test will take longer to run as it runs all the analyses for
    the specified species from start to finish.  Depending on the
    availability of farm resources and batch size/queue choice, the test
    may take about three hours or longer.

Currently there is data for testing the raw computes in human.

These are the analyses and modules which can be tested and the tables
they write their data to:

 ANALYSIS          MODULE                 TABLES TO BE WRITTEN TO
----------      ------------     --------------------------------------
RepeatMask      RepeatMasker     repeat_feature, repeat_consensus
Dust            Dust             repeat_feature, repeat_consensus
TRF             TRF              repeat_feature, repeat_consensus
Eponine         EponineTSS       simple_feature
FirstEF         FirstEF          simple_feature
tRNAscan        tRNAscan_SE      simple_feature
CpG             CPG              simple_feature
Genscan         Genscan          prediction_transcript, prediction_exon
Vertrna         BlastGenscanDNA  dna_align_feature
Unigene         BlastGenscanDNA  dna_align_feature
Uniprot         BlastGenscanPep  protein_align_feature
marker          EPCR             marker_feature
Pmatch          pmatch           protein_align_feature
BestPmatch      bestpmatch       protein_align_feature

To run these tests individually you need a commandline like this:

  ./test_single_analysis.pl -logic_name CpG \
    -feature_table simple_feature

If you want the data compared to the reference data you will need to
pass the commandline option -run_comparison (and also have RefDB.conf
filled in beforehand).

If you don't want the output files/dir and databases deleted after the
test is run, you can specify the '-dont_cleanup' option.

If you run with the '-dont_cleanup' option the script will print
out commandlines for the cleanup.  Cleanup is done with the
cleanup_output.pl script.

For other possible options, see documentation of
test_single_analysis.pl.

To run the whole pipeline in one go, use a commandline like this:

  ./test_whole_pipeline.pl 

None of the commandline options are compulsory when testing the whole
pipeline.
